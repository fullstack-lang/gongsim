// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData, FrontRepoService, FrontRepo, NullInt64, SelectionMode } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { EngineDB } from '../engine-db'
import { EngineService } from '../engine.service'

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-enginestable',
  templateUrl: './engines-table.component.html',
  styleUrls: ['./engines-table.component.css'],
})
export class EnginesTableComponent implements OnInit {

  // mode at invocation
  mode: TableComponentMode

  // used if the component is called as a selection component of Engine instances
  selection: SelectionModel<EngineDB>;
  initialSelection = new Array<EngineDB>();

  // the data source for the table
  engines: EngineDB[];
  matTableDataSource: MatTableDataSource<EngineDB>

  // front repo, that will be referenced by this.engines
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (engineDB: EngineDB, property: string) => {
      switch (property) {
        // insertion point for specific sorting accessor
        case 'Name':
          return engineDB.Name;

        case 'EndTime':
          return engineDB.EndTime;

        case 'CurrentTime':
          return engineDB.CurrentTime;

        case 'SecondsSinceStart':
          return engineDB.SecondsSinceStart;

        case 'Fired':
          return engineDB.Fired;

        case 'ControlMode':
          return engineDB.ControlMode;

        case 'State':
          return engineDB.State;

        case 'Speed':
          return engineDB.Speed;

        default:
          return EngineDB[property];
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (engineDB: EngineDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the engineDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += engineDB.Name.toLowerCase()
      mergedContent += engineDB.EndTime.toLowerCase()
      mergedContent += engineDB.CurrentTime.toLowerCase()
      mergedContent += engineDB.SecondsSinceStart.toString()
      mergedContent += engineDB.Fired.toString()
      mergedContent += engineDB.ControlMode.toLowerCase()
      mergedContent += engineDB.State.toLowerCase()
      mergedContent += engineDB.Speed.toString()

      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private engineService: EngineService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of engine instances
    public dialogRef: MatDialogRef<EnginesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      switch (dialogData.SelectionMode) {
        case SelectionMode.ONE_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
          break
        case SelectionMode.MANY_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.MANY_MANY_ASSOCIATION_MODE
          break
        default:
      }
    }

    // observable for changes in structs
    this.engineService.EngineServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getEngines()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "EndTime",
        "CurrentTime",
        "SecondsSinceStart",
        "Fired",
        "ControlMode",
        "State",
        "Speed",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "EndTime",
        "CurrentTime",
        "SecondsSinceStart",
        "Fired",
        "ControlMode",
        "State",
        "Speed",
      ]
      this.selection = new SelectionModel<EngineDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getEngines()
    this.matTableDataSource = new MatTableDataSource(this.engines)
  }

  getEngines(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.engines = this.frontRepo.Engines_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
          this.engines.forEach(
            engine => {
              let ID = this.dialogData.ID
              let revPointer = engine[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(engine)
              }
            }
          )
          this.selection = new SelectionModel<EngineDB>(allowMultiSelect, this.initialSelection);
        }

        if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

          let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
          let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

          if (sourceInstance[this.dialogData.SourceField]) {
            for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
              let engine = associationInstance[this.dialogData.IntermediateStructField]
              this.initialSelection.push(engine)
            }
          }
          this.selection = new SelectionModel<EngineDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.engines
      }
    )
  }

  // newEngine initiate a new engine
  // create a new Engine objet
  newEngine() {
  }

  deleteEngine(engineID: number, engine: EngineDB) {
    // list of engines is truncated of engine before the delete
    this.engines = this.engines.filter(h => h !== engine);

    this.engineService.deleteEngine(engineID).subscribe(
      engine => {
        this.engineService.EngineServiceChanged.next("delete")
      }
    );
  }

  editEngine(engineID: number, engine: EngineDB) {

  }

  // display engine in router
  displayEngineInRouter(engineID: number) {
    this.router.navigate(["github_com_fullstack_lang_gongsim_go-" + "engine-display", engineID])
  }

  // set editor outlet
  setEditorRouterOutlet(engineID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongsim_go_editor: ["github_com_fullstack_lang_gongsim_go-" + "engine-detail", engineID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(engineID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongsim_go_presentation: ["github_com_fullstack_lang_gongsim_go-" + "engine-presentation", engineID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.engines.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.engines.forEach(row => this.selection.select(row));
  }

  save() {

    if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {

      let toUpdate = new Set<EngineDB>()

      // reset all initial selection of engine that belong to engine
      this.initialSelection.forEach(
        engine => {
          engine[this.dialogData.ReversePointer].Int64 = 0
          engine[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(engine)
        }
      )

      // from selection, set engine that belong to engine
      this.selection.selected.forEach(
        engine => {
          let ID = +this.dialogData.ID
          engine[this.dialogData.ReversePointer].Int64 = ID
          engine[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(engine)
        }
      )

      // update all engine (only update selection & initial selection)
      toUpdate.forEach(
        engine => {
          this.engineService.updateEngine(engine)
            .subscribe(engine => {
              this.engineService.EngineServiceChanged.next("update")
            });
        }
      )
    }

    if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

      let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
      let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

      // First, parse all instance of the association struct and remove the instance
      // that have unselect
      let unselectedEngine = new Set<number>()
      for (let engine of this.initialSelection) {
        if (this.selection.selected.includes(engine)) {
          // console.log("engine " + engine.Name + " is still selected")
        } else {
          console.log("engine " + engine.Name + " has been unselected")
          unselectedEngine.add(engine.ID)
          console.log("is unselected " + unselectedEngine.has(engine.ID))
        }
      }

      // delete the association instance
      if (sourceInstance[this.dialogData.SourceField]) {
        for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
          let engine = associationInstance[this.dialogData.IntermediateStructField]
          if (unselectedEngine.has(engine.ID)) {

            this.frontRepoService.deleteService( this.dialogData.IntermediateStruct, associationInstance )
          }
        }
      }

      // is the source array is emptyn create it
      if (sourceInstance[this.dialogData.SourceField] == undefined) {
        sourceInstance[this.dialogData.SourceField] = new Array<any>()
      }

      // second, parse all instance of the selected
      if (sourceInstance[this.dialogData.SourceField]) {
        this.selection.selected.forEach(
          engine => {
            if (!this.initialSelection.includes(engine)) {
              // console.log("engine " + engine.Name + " has been added to the selection")

              let associationInstance = {
                Name: sourceInstance["Name"] + "-" + engine.Name,
              }

              associationInstance[this.dialogData.IntermediateStructField+"ID"] = new NullInt64
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Int64 = engine.ID
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Valid = true

              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"] = new NullInt64
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Int64 = sourceInstance["ID"]
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Valid = true

              this.frontRepoService.postService( this.dialogData.IntermediateStruct, associationInstance )

            } else {
              // console.log("engine " + engine.Name + " is still selected")
            }
          }
        )
      }

      // this.selection = new SelectionModel<EngineDB>(allowMultiSelect, this.initialSelection);
    }

    // why pizza ?
    this.dialogRef.close('Pizza!');
  }
}
