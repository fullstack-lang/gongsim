// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	DummyAgents           map[*DummyAgent]any
	DummyAgents_mapString map[string]*DummyAgent

	OnAfterDummyAgentCreateCallback OnAfterCreateInterface[DummyAgent]
	OnAfterDummyAgentUpdateCallback OnAfterUpdateInterface[DummyAgent]
	OnAfterDummyAgentDeleteCallback OnAfterDeleteInterface[DummyAgent]
	OnAfterDummyAgentReadCallback   OnAfterReadInterface[DummyAgent]

	Engines           map[*Engine]any
	Engines_mapString map[string]*Engine

	OnAfterEngineCreateCallback OnAfterCreateInterface[Engine]
	OnAfterEngineUpdateCallback OnAfterUpdateInterface[Engine]
	OnAfterEngineDeleteCallback OnAfterDeleteInterface[Engine]
	OnAfterEngineReadCallback   OnAfterReadInterface[Engine]

	Events           map[*Event]any
	Events_mapString map[string]*Event

	OnAfterEventCreateCallback OnAfterCreateInterface[Event]
	OnAfterEventUpdateCallback OnAfterUpdateInterface[Event]
	OnAfterEventDeleteCallback OnAfterDeleteInterface[Event]
	OnAfterEventReadCallback   OnAfterReadInterface[Event]

	GongsimCommands           map[*GongsimCommand]any
	GongsimCommands_mapString map[string]*GongsimCommand

	OnAfterGongsimCommandCreateCallback OnAfterCreateInterface[GongsimCommand]
	OnAfterGongsimCommandUpdateCallback OnAfterUpdateInterface[GongsimCommand]
	OnAfterGongsimCommandDeleteCallback OnAfterDeleteInterface[GongsimCommand]
	OnAfterGongsimCommandReadCallback   OnAfterReadInterface[GongsimCommand]

	GongsimStatuss           map[*GongsimStatus]any
	GongsimStatuss_mapString map[string]*GongsimStatus

	OnAfterGongsimStatusCreateCallback OnAfterCreateInterface[GongsimStatus]
	OnAfterGongsimStatusUpdateCallback OnAfterUpdateInterface[GongsimStatus]
	OnAfterGongsimStatusDeleteCallback OnAfterDeleteInterface[GongsimStatus]
	OnAfterGongsimStatusReadCallback   OnAfterReadInterface[GongsimStatus]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string
	Map_DocLink_Renaming   map[string]GONG__Identifier

	// map_Gongstruct_BackPointer is storage of back pointers
	map_Gongstruct_BackPointer map[any]any
}

func SetBackPointer[T Gongstruct](stageStruct *StageStruct, instance *T, backPointer any) {
	stageStruct.map_Gongstruct_BackPointer[instance] = backPointer
}
func GetBackPointer[T Gongstruct](stageStruct *StageStruct, instance *T) (backPointer any) {
	backPointer, _ = stageStruct.map_Gongstruct_BackPointer[instance]
	return
}

type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDummyAgent(dummyagent *DummyAgent)
	CheckoutDummyAgent(dummyagent *DummyAgent)
	CommitEngine(engine *Engine)
	CheckoutEngine(engine *Engine)
	CommitEvent(event *Event)
	CheckoutEvent(event *Event)
	CommitGongsimCommand(gongsimcommand *GongsimCommand)
	CheckoutGongsimCommand(gongsimcommand *GongsimCommand)
	CommitGongsimStatus(gongsimstatus *GongsimStatus)
	CheckoutGongsimStatus(gongsimstatus *GongsimStatus)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	DummyAgents:           make(map[*DummyAgent]any),
	DummyAgents_mapString: make(map[string]*DummyAgent),

	Engines:           make(map[*Engine]any),
	Engines_mapString: make(map[string]*Engine),

	Events:           make(map[*Event]any),
	Events_mapString: make(map[string]*Event),

	GongsimCommands:           make(map[*GongsimCommand]any),
	GongsimCommands_mapString: make(map[string]*GongsimCommand),

	GongsimStatuss:           make(map[*GongsimStatus]any),
	GongsimStatuss_mapString: make(map[string]*GongsimStatus),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
	map_Gongstruct_BackPointer:     make(map[any]any),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["DummyAgent"] = len(stage.DummyAgents)
	stage.Map_GongStructName_InstancesNb["Engine"] = len(stage.Engines)
	stage.Map_GongStructName_InstancesNb["Event"] = len(stage.Events)
	stage.Map_GongStructName_InstancesNb["GongsimCommand"] = len(stage.GongsimCommands)
	stage.Map_GongStructName_InstancesNb["GongsimStatus"] = len(stage.GongsimStatuss)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["DummyAgent"] = len(stage.DummyAgents)
	stage.Map_GongStructName_InstancesNb["Engine"] = len(stage.Engines)
	stage.Map_GongStructName_InstancesNb["Event"] = len(stage.Events)
	stage.Map_GongStructName_InstancesNb["GongsimCommand"] = len(stage.GongsimCommands)
	stage.Map_GongStructName_InstancesNb["GongsimStatus"] = len(stage.GongsimStatuss)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts dummyagent to the model stage
func (dummyagent *DummyAgent) Stage() *DummyAgent {
	Stage.DummyAgents[dummyagent] = __member
	Stage.DummyAgents_mapString[dummyagent.Name] = dummyagent

	return dummyagent
}

// Unstage removes dummyagent off the model stage
func (dummyagent *DummyAgent) Unstage() *DummyAgent {
	delete(Stage.DummyAgents, dummyagent)
	delete(Stage.DummyAgents_mapString, dummyagent.Name)
	return dummyagent
}

// commit dummyagent to the back repo (if it is already staged)
func (dummyagent *DummyAgent) Commit() *DummyAgent {
	if _, ok := Stage.DummyAgents[dummyagent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDummyAgent(dummyagent)
		}
	}
	return dummyagent
}

// Checkout dummyagent to the back repo (if it is already staged)
func (dummyagent *DummyAgent) Checkout() *DummyAgent {
	if _, ok := Stage.DummyAgents[dummyagent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDummyAgent(dummyagent)
		}
	}
	return dummyagent
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of dummyagent to the model stage
func (dummyagent *DummyAgent) StageCopy() *DummyAgent {
	_dummyagent := new(DummyAgent)
	*_dummyagent = *dummyagent
	_dummyagent.Stage()
	return _dummyagent
}

// StageAndCommit appends dummyagent to the model stage and commit to the orm repo
func (dummyagent *DummyAgent) StageAndCommit() *DummyAgent {
	dummyagent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDummyAgent(dummyagent)
	}
	return dummyagent
}

// DeleteStageAndCommit appends dummyagent to the model stage and commit to the orm repo
func (dummyagent *DummyAgent) DeleteStageAndCommit() *DummyAgent {
	dummyagent.Unstage()
	DeleteORMDummyAgent(dummyagent)
	return dummyagent
}

// StageCopyAndCommit appends a copy of dummyagent to the model stage and commit to the orm repo
func (dummyagent *DummyAgent) StageCopyAndCommit() *DummyAgent {
	_dummyagent := new(DummyAgent)
	*_dummyagent = *dummyagent
	_dummyagent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDummyAgent(dummyagent)
	}
	return _dummyagent
}

// CreateORMDummyAgent enables dynamic staging of a DummyAgent instance
func CreateORMDummyAgent(dummyagent *DummyAgent) {
	dummyagent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDummyAgent(dummyagent)
	}
}

// DeleteORMDummyAgent enables dynamic staging of a DummyAgent instance
func DeleteORMDummyAgent(dummyagent *DummyAgent) {
	dummyagent.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDummyAgent(dummyagent)
	}
}

// for satisfaction of GongStruct interface
func (dummyagent *DummyAgent) GetName() (res string) {
	return dummyagent.Name
}

// Stage puts engine to the model stage
func (engine *Engine) Stage() *Engine {
	Stage.Engines[engine] = __member
	Stage.Engines_mapString[engine.Name] = engine

	return engine
}

// Unstage removes engine off the model stage
func (engine *Engine) Unstage() *Engine {
	delete(Stage.Engines, engine)
	delete(Stage.Engines_mapString, engine.Name)
	return engine
}

// commit engine to the back repo (if it is already staged)
func (engine *Engine) Commit() *Engine {
	if _, ok := Stage.Engines[engine]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEngine(engine)
		}
	}
	return engine
}

// Checkout engine to the back repo (if it is already staged)
func (engine *Engine) Checkout() *Engine {
	if _, ok := Stage.Engines[engine]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEngine(engine)
		}
	}
	return engine
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of engine to the model stage
func (engine *Engine) StageCopy() *Engine {
	_engine := new(Engine)
	*_engine = *engine
	_engine.Stage()
	return _engine
}

// StageAndCommit appends engine to the model stage and commit to the orm repo
func (engine *Engine) StageAndCommit() *Engine {
	engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
	return engine
}

// DeleteStageAndCommit appends engine to the model stage and commit to the orm repo
func (engine *Engine) DeleteStageAndCommit() *Engine {
	engine.Unstage()
	DeleteORMEngine(engine)
	return engine
}

// StageCopyAndCommit appends a copy of engine to the model stage and commit to the orm repo
func (engine *Engine) StageCopyAndCommit() *Engine {
	_engine := new(Engine)
	*_engine = *engine
	_engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
	return _engine
}

// CreateORMEngine enables dynamic staging of a Engine instance
func CreateORMEngine(engine *Engine) {
	engine.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEngine(engine)
	}
}

// DeleteORMEngine enables dynamic staging of a Engine instance
func DeleteORMEngine(engine *Engine) {
	engine.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEngine(engine)
	}
}

// for satisfaction of GongStruct interface
func (engine *Engine) GetName() (res string) {
	return engine.Name
}

// Stage puts event to the model stage
func (event *Event) Stage() *Event {
	Stage.Events[event] = __member
	Stage.Events_mapString[event.Name] = event

	return event
}

// Unstage removes event off the model stage
func (event *Event) Unstage() *Event {
	delete(Stage.Events, event)
	delete(Stage.Events_mapString, event.Name)
	return event
}

// commit event to the back repo (if it is already staged)
func (event *Event) Commit() *Event {
	if _, ok := Stage.Events[event]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEvent(event)
		}
	}
	return event
}

// Checkout event to the back repo (if it is already staged)
func (event *Event) Checkout() *Event {
	if _, ok := Stage.Events[event]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEvent(event)
		}
	}
	return event
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of event to the model stage
func (event *Event) StageCopy() *Event {
	_event := new(Event)
	*_event = *event
	_event.Stage()
	return _event
}

// StageAndCommit appends event to the model stage and commit to the orm repo
func (event *Event) StageAndCommit() *Event {
	event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
	return event
}

// DeleteStageAndCommit appends event to the model stage and commit to the orm repo
func (event *Event) DeleteStageAndCommit() *Event {
	event.Unstage()
	DeleteORMEvent(event)
	return event
}

// StageCopyAndCommit appends a copy of event to the model stage and commit to the orm repo
func (event *Event) StageCopyAndCommit() *Event {
	_event := new(Event)
	*_event = *event
	_event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
	return _event
}

// CreateORMEvent enables dynamic staging of a Event instance
func CreateORMEvent(event *Event) {
	event.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEvent(event)
	}
}

// DeleteORMEvent enables dynamic staging of a Event instance
func DeleteORMEvent(event *Event) {
	event.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEvent(event)
	}
}

// for satisfaction of GongStruct interface
func (event *Event) GetName() (res string) {
	return event.Name
}

// Stage puts gongsimcommand to the model stage
func (gongsimcommand *GongsimCommand) Stage() *GongsimCommand {
	Stage.GongsimCommands[gongsimcommand] = __member
	Stage.GongsimCommands_mapString[gongsimcommand.Name] = gongsimcommand

	return gongsimcommand
}

// Unstage removes gongsimcommand off the model stage
func (gongsimcommand *GongsimCommand) Unstage() *GongsimCommand {
	delete(Stage.GongsimCommands, gongsimcommand)
	delete(Stage.GongsimCommands_mapString, gongsimcommand.Name)
	return gongsimcommand
}

// commit gongsimcommand to the back repo (if it is already staged)
func (gongsimcommand *GongsimCommand) Commit() *GongsimCommand {
	if _, ok := Stage.GongsimCommands[gongsimcommand]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongsimCommand(gongsimcommand)
		}
	}
	return gongsimcommand
}

// Checkout gongsimcommand to the back repo (if it is already staged)
func (gongsimcommand *GongsimCommand) Checkout() *GongsimCommand {
	if _, ok := Stage.GongsimCommands[gongsimcommand]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongsimCommand(gongsimcommand)
		}
	}
	return gongsimcommand
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongsimcommand to the model stage
func (gongsimcommand *GongsimCommand) StageCopy() *GongsimCommand {
	_gongsimcommand := new(GongsimCommand)
	*_gongsimcommand = *gongsimcommand
	_gongsimcommand.Stage()
	return _gongsimcommand
}

// StageAndCommit appends gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) StageAndCommit() *GongsimCommand {
	gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
	return gongsimcommand
}

// DeleteStageAndCommit appends gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) DeleteStageAndCommit() *GongsimCommand {
	gongsimcommand.Unstage()
	DeleteORMGongsimCommand(gongsimcommand)
	return gongsimcommand
}

// StageCopyAndCommit appends a copy of gongsimcommand to the model stage and commit to the orm repo
func (gongsimcommand *GongsimCommand) StageCopyAndCommit() *GongsimCommand {
	_gongsimcommand := new(GongsimCommand)
	*_gongsimcommand = *gongsimcommand
	_gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
	return _gongsimcommand
}

// CreateORMGongsimCommand enables dynamic staging of a GongsimCommand instance
func CreateORMGongsimCommand(gongsimcommand *GongsimCommand) {
	gongsimcommand.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimCommand(gongsimcommand)
	}
}

// DeleteORMGongsimCommand enables dynamic staging of a GongsimCommand instance
func DeleteORMGongsimCommand(gongsimcommand *GongsimCommand) {
	gongsimcommand.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongsimCommand(gongsimcommand)
	}
}

// for satisfaction of GongStruct interface
func (gongsimcommand *GongsimCommand) GetName() (res string) {
	return gongsimcommand.Name
}

// Stage puts gongsimstatus to the model stage
func (gongsimstatus *GongsimStatus) Stage() *GongsimStatus {
	Stage.GongsimStatuss[gongsimstatus] = __member
	Stage.GongsimStatuss_mapString[gongsimstatus.Name] = gongsimstatus

	return gongsimstatus
}

// Unstage removes gongsimstatus off the model stage
func (gongsimstatus *GongsimStatus) Unstage() *GongsimStatus {
	delete(Stage.GongsimStatuss, gongsimstatus)
	delete(Stage.GongsimStatuss_mapString, gongsimstatus.Name)
	return gongsimstatus
}

// commit gongsimstatus to the back repo (if it is already staged)
func (gongsimstatus *GongsimStatus) Commit() *GongsimStatus {
	if _, ok := Stage.GongsimStatuss[gongsimstatus]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGongsimStatus(gongsimstatus)
		}
	}
	return gongsimstatus
}

// Checkout gongsimstatus to the back repo (if it is already staged)
func (gongsimstatus *GongsimStatus) Checkout() *GongsimStatus {
	if _, ok := Stage.GongsimStatuss[gongsimstatus]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGongsimStatus(gongsimstatus)
		}
	}
	return gongsimstatus
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gongsimstatus to the model stage
func (gongsimstatus *GongsimStatus) StageCopy() *GongsimStatus {
	_gongsimstatus := new(GongsimStatus)
	*_gongsimstatus = *gongsimstatus
	_gongsimstatus.Stage()
	return _gongsimstatus
}

// StageAndCommit appends gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) StageAndCommit() *GongsimStatus {
	gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
	return gongsimstatus
}

// DeleteStageAndCommit appends gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) DeleteStageAndCommit() *GongsimStatus {
	gongsimstatus.Unstage()
	DeleteORMGongsimStatus(gongsimstatus)
	return gongsimstatus
}

// StageCopyAndCommit appends a copy of gongsimstatus to the model stage and commit to the orm repo
func (gongsimstatus *GongsimStatus) StageCopyAndCommit() *GongsimStatus {
	_gongsimstatus := new(GongsimStatus)
	*_gongsimstatus = *gongsimstatus
	_gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
	return _gongsimstatus
}

// CreateORMGongsimStatus enables dynamic staging of a GongsimStatus instance
func CreateORMGongsimStatus(gongsimstatus *GongsimStatus) {
	gongsimstatus.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGongsimStatus(gongsimstatus)
	}
}

// DeleteORMGongsimStatus enables dynamic staging of a GongsimStatus instance
func DeleteORMGongsimStatus(gongsimstatus *GongsimStatus) {
	gongsimstatus.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGongsimStatus(gongsimstatus)
	}
}

// for satisfaction of GongStruct interface
func (gongsimstatus *GongsimStatus) GetName() (res string) {
	return gongsimstatus.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDummyAgent(DummyAgent *DummyAgent)
	CreateORMEngine(Engine *Engine)
	CreateORMEvent(Event *Event)
	CreateORMGongsimCommand(GongsimCommand *GongsimCommand)
	CreateORMGongsimStatus(GongsimStatus *GongsimStatus)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDummyAgent(DummyAgent *DummyAgent)
	DeleteORMEngine(Engine *Engine)
	DeleteORMEvent(Event *Event)
	DeleteORMGongsimCommand(GongsimCommand *GongsimCommand)
	DeleteORMGongsimStatus(GongsimStatus *GongsimStatus)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.DummyAgents = make(map[*DummyAgent]any)
	stage.DummyAgents_mapString = make(map[string]*DummyAgent)

	stage.Engines = make(map[*Engine]any)
	stage.Engines_mapString = make(map[string]*Engine)

	stage.Events = make(map[*Event]any)
	stage.Events_mapString = make(map[string]*Event)

	stage.GongsimCommands = make(map[*GongsimCommand]any)
	stage.GongsimCommands_mapString = make(map[string]*GongsimCommand)

	stage.GongsimStatuss = make(map[*GongsimStatus]any)
	stage.GongsimStatuss_mapString = make(map[string]*GongsimStatus)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.DummyAgents = nil
	stage.DummyAgents_mapString = nil

	stage.Engines = nil
	stage.Engines_mapString = nil

	stage.Events = nil
	stage.Events_mapString = nil

	stage.GongsimCommands = nil
	stage.GongsimCommands_mapString = nil

	stage.GongsimStatuss = nil
	stage.GongsimStatuss_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for dummyagent := range stage.DummyAgents {
		dummyagent.Unstage()
	}

	for engine := range stage.Engines {
		engine.Unstage()
	}

	for event := range stage.Events {
		event.Unstage()
	}

	for gongsimcommand := range stage.GongsimCommands {
		gongsimcommand.Unstage()
	}

	for gongsimstatus := range stage.GongsimStatuss {
		gongsimstatus.Unstage()
	}

}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	DummyAgent | Engine | Event | GongsimCommand | GongsimStatus
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*DummyAgent | *Engine | *Event | *GongsimCommand | *GongsimStatus
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*DummyAgent]any |
		map[*Engine]any |
		map[*Event]any |
		map[*GongsimCommand]any |
		map[*GongsimStatus]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*DummyAgent |
		map[string]*Engine |
		map[string]*Event |
		map[string]*GongsimCommand |
		map[string]*GongsimStatus |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet](stages ...*StageStruct) *Type {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*DummyAgent]any:
		return any(&stage.DummyAgents).(*Type)
	case map[*Engine]any:
		return any(&stage.Engines).(*Type)
	case map[*Event]any:
		return any(&stage.Events).(*Type)
	case map[*GongsimCommand]any:
		return any(&stage.GongsimCommands).(*Type)
	case map[*GongsimStatus]any:
		return any(&stage.GongsimStatuss).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString](stages ...*StageStruct) *Type {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*DummyAgent:
		return any(&stage.DummyAgents_mapString).(*Type)
	case map[string]*Engine:
		return any(&stage.Engines_mapString).(*Type)
	case map[string]*Event:
		return any(&stage.Events_mapString).(*Type)
	case map[string]*GongsimCommand:
		return any(&stage.GongsimCommands_mapString).(*Type)
	case map[string]*GongsimStatus:
		return any(&stage.GongsimStatuss_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct](stages ...*StageStruct) *map[*Type]any {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case DummyAgent:
		return any(&stage.DummyAgents).(*map[*Type]any)
	case Engine:
		return any(&stage.Engines).(*map[*Type]any)
	case Event:
		return any(&stage.Events).(*map[*Type]any)
	case GongsimCommand:
		return any(&stage.GongsimCommands).(*map[*Type]any)
	case GongsimStatus:
		return any(&stage.GongsimStatuss).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct](stages ...*StageStruct) *map[string]*Type {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case DummyAgent:
		return any(&stage.DummyAgents_mapString).(*map[string]*Type)
	case Engine:
		return any(&stage.Engines_mapString).(*map[string]*Type)
	case Event:
		return any(&stage.Events_mapString).(*map[string]*Type)
	case GongsimCommand:
		return any(&stage.GongsimCommands_mapString).(*map[string]*Type)
	case GongsimStatus:
		return any(&stage.GongsimStatuss_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case DummyAgent:
		return any(&DummyAgent{
			// Initialisation of associations
		}).(*Type)
	case Engine:
		return any(&Engine{
			// Initialisation of associations
		}).(*Type)
	case Event:
		return any(&Event{
			// Initialisation of associations
		}).(*Type)
	case GongsimCommand:
		return any(&GongsimCommand{
			// Initialisation of associations
		}).(*Type)
	case GongsimStatus:
		return any(&GongsimStatus{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of DummyAgent
	case DummyAgent:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Engine
	case Engine:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Event
	case Event:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of GongsimCommand
	case GongsimCommand:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of GongsimStatus
	case GongsimStatus:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of DummyAgent
	case DummyAgent:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Engine
	case Engine:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Event
	case Event:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of GongsimCommand
	case GongsimCommand:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of GongsimStatus
	case GongsimStatus:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case DummyAgent:
		res = "DummyAgent"
	case Engine:
		res = "Engine"
	case Event:
		res = "Event"
	case GongsimCommand:
		res = "GongsimCommand"
	case GongsimStatus:
		res = "GongsimStatus"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case DummyAgent:
		res = []string{"TechName", "Name"}
	case Engine:
		res = []string{"Name", "EndTime", "CurrentTime", "SecondsSinceStart", "Fired", "ControlMode", "State", "Speed"}
	case Event:
		res = []string{"Name", "Duration"}
	case GongsimCommand:
		res = []string{"Name", "Command", "CommandDate", "SpeedCommandType", "DateSpeedCommand"}
	case GongsimStatus:
		res = []string{"Name", "CurrentCommand", "CompletionDate", "CurrentSpeedCommand", "SpeedCommandCompletionDate"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case DummyAgent:
		switch fieldName {
		// string value of fields
		case "TechName":
			res = any(instance).(DummyAgent).TechName
		case "Name":
			res = any(instance).(DummyAgent).Name
		}
	case Engine:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Engine).Name
		case "EndTime":
			res = any(instance).(Engine).EndTime
		case "CurrentTime":
			res = any(instance).(Engine).CurrentTime
		case "SecondsSinceStart":
			res = fmt.Sprintf("%f", any(instance).(Engine).SecondsSinceStart)
		case "Fired":
			res = fmt.Sprintf("%d", any(instance).(Engine).Fired)
		case "ControlMode":
			enum := any(instance).(Engine).ControlMode
			res = enum.ToCodeString()
		case "State":
			enum := any(instance).(Engine).State
			res = enum.ToCodeString()
		case "Speed":
			res = fmt.Sprintf("%f", any(instance).(Engine).Speed)
		}
	case Event:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Event).Name
		case "Duration":
			res = fmt.Sprintf("%d", any(instance).(Event).Duration)
		}
	case GongsimCommand:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(GongsimCommand).Name
		case "Command":
			enum := any(instance).(GongsimCommand).Command
			res = enum.ToCodeString()
		case "CommandDate":
			res = any(instance).(GongsimCommand).CommandDate
		case "SpeedCommandType":
			enum := any(instance).(GongsimCommand).SpeedCommandType
			res = enum.ToCodeString()
		case "DateSpeedCommand":
			res = any(instance).(GongsimCommand).DateSpeedCommand
		}
	case GongsimStatus:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(GongsimStatus).Name
		case "CurrentCommand":
			enum := any(instance).(GongsimStatus).CurrentCommand
			res = enum.ToCodeString()
		case "CompletionDate":
			res = any(instance).(GongsimStatus).CompletionDate
		case "CurrentSpeedCommand":
			enum := any(instance).(GongsimStatus).CurrentSpeedCommand
			res = enum.ToCodeString()
		case "SpeedCommandCompletionDate":
			res = any(instance).(GongsimStatus).SpeedCommandCompletionDate
		}
	}
	return
}

// Last line of the template
