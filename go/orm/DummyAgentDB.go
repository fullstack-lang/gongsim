// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongsim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DummyAgent sql.NullBool
var __DummyAgent_time__dummyDeclaration time.Duration
var dummy_DummyAgent_sort sort.Float64Slice

// DummyAgentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dummyagentAPI
type DummyAgentAPI struct {
	models.DummyAgent

	// insertion for fields declaration
	// Declation for basic field dummyagentDB.TechName {{BasicKind}} (to be completed)
	TechName_Data sql.NullString

	// field Engine is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EngineID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	EngineName string

	// Declation for basic field dummyagentDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// end of insertion
}

// DummyAgentDB describes a dummyagent in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model dummyagentDB
type DummyAgentDB struct {
	gorm.Model

	DummyAgentAPI
}

// DummyAgentDBs arrays dummyagentDBs
// swagger:response dummyagentDBsResponse
type DummyAgentDBs []DummyAgentDB

// DummyAgentDBResponse provides response
// swagger:response dummyagentDBResponse
type DummyAgentDBResponse struct {
	DummyAgentDB
}

type BackRepoDummyAgentStruct struct {
	// stores DummyAgentDB according to their gorm ID
	Map_DummyAgentDBID_DummyAgentDB *map[uint]*DummyAgentDB

	// stores DummyAgentDB ID according to DummyAgent address
	Map_DummyAgentPtr_DummyAgentDBID *map[*models.DummyAgent]uint

	// stores DummyAgent according to their gorm ID
	Map_DummyAgentDBID_DummyAgentPtr *map[uint]*models.DummyAgent

	db *gorm.DB
}

// BackRepoDummyAgent.Init set up the BackRepo of the DummyAgent
func (backRepoDummyAgent *BackRepoDummyAgentStruct) Init(db *gorm.DB) (Error error) {

	if backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr != nil {
		err := errors.New("In Init, backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr should be nil")
		return err
	}

	if backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB != nil {
		err := errors.New("In Init, backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB should be nil")
		return err
	}

	if backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID != nil {
		err := errors.New("In Init, backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.DummyAgent, 0)
	backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr = &tmp

	tmpDB := make(map[uint]*DummyAgentDB, 0)
	backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB = &tmpDB

	tmpID := make(map[*models.DummyAgent]uint, 0)
	backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID = &tmpID

	backRepoDummyAgent.db = db
	return
}

// BackRepoDummyAgent.CommitPhaseOne commits all staged instances of DummyAgent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for dummyagent := range stage.DummyAgents {
		backRepoDummyAgent.CommitPhaseOneInstance(dummyagent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dummyagent := range *backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr {
		if _, ok := stage.DummyAgents[dummyagent]; !ok {
			backRepoDummyAgent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDummyAgent.CommitDeleteInstance commits deletion of DummyAgent to the BackRepo
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitDeleteInstance(id uint) (Error error) {

	dummyagent := (*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr)[id]

	// dummyagent is not staged anymore, remove dummyagentDB
	dummyagentDB := (*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB)[id]
	query := backRepoDummyAgent.db.Unscoped().Delete(&dummyagentDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID), dummyagent)
	delete((*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr), id)
	delete((*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB), id)

	return
}

// BackRepoDummyAgent.CommitPhaseOneInstance commits dummyagent staged instances of DummyAgent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseOneInstance(dummyagent *models.DummyAgent) (Error error) {

	// check if the dummyagent is not commited yet
	if _, ok := (*backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID)[dummyagent]; ok {
		return
	}

	// initiate dummyagent
	var dummyagentDB DummyAgentDB
	dummyagentDB.DummyAgent = *dummyagent

	query := backRepoDummyAgent.db.Create(&dummyagentDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID)[dummyagent] = dummyagentDB.ID
	(*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr)[dummyagentDB.ID] = dummyagent
	(*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB)[dummyagentDB.ID] = &dummyagentDB

	return
}

// BackRepoDummyAgent.CommitPhaseTwo commits all staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dummyagent := range *backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr {
		backRepoDummyAgent.CommitPhaseTwoInstance(backRepo, idx, dummyagent)
	}

	return
}

// BackRepoDummyAgent.CommitPhaseTwoInstance commits {{structname }} of models.DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dummyagent *models.DummyAgent) (Error error) {

	// fetch matching dummyagentDB
	if dummyagentDB, ok := (*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				dummyagentDB.TechName_Data.String = dummyagent.TechName
				dummyagentDB.TechName_Data.Valid = true

				// commit pointer value dummyagent.Engine translates to updating the dummyagent.EngineID
				dummyagentDB.EngineID.Valid = true // allow for a 0 value (nil association)
				if dummyagent.Engine != nil {
					if EngineId, ok := (*backRepo.BackRepoEngine.Map_EnginePtr_EngineDBID)[dummyagent.Engine]; ok {
						dummyagentDB.EngineID.Int64 = int64(EngineId)
					}
				}

				dummyagentDB.Name_Data.String = dummyagent.Name
				dummyagentDB.Name_Data.Valid = true

			}
		}
		query := backRepoDummyAgent.db.Save(&dummyagentDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DummyAgent intance %s", dummyagent.Name))
		return err
	}

	return
}

// BackRepoDummyAgent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseOne() (Error error) {

	dummyagentDBArray := make([]DummyAgentDB, 0)
	query := backRepoDummyAgent.db.Find(&dummyagentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, dummyagentDB := range dummyagentDBArray {
		backRepoDummyAgent.CheckoutPhaseOneInstance(&dummyagentDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a dummyagentDB that has been found in the DB, updates the backRepo and stages the
// models version of the dummyagentDB
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseOneInstance(dummyagentDB *DummyAgentDB) (Error error) {

	// if absent, create entries in the backRepoDummyAgent maps.
	dummyagentWithNewFieldValues := dummyagentDB.DummyAgent
	if _, ok := (*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr)[dummyagentDB.ID]; !ok {

		(*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr)[dummyagentDB.ID] = &dummyagentWithNewFieldValues
		(*backRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID)[&dummyagentWithNewFieldValues] = dummyagentDB.ID

		// append model store with the new element
		dummyagentWithNewFieldValues.Stage()
	}
	dummyagentDBWithNewFieldValues := *dummyagentDB
	(*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB)[dummyagentDB.ID] = &dummyagentDBWithNewFieldValues

	return
}

// BackRepoDummyAgent.CheckoutPhaseTwo Checkouts all staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dummyagentDB := range *backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentDB {
		backRepoDummyAgent.CheckoutPhaseTwoInstance(backRepo, dummyagentDB)
	}
	return
}

// BackRepoDummyAgent.CheckoutPhaseTwoInstance Checkouts staged instances of DummyAgent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyAgent *BackRepoDummyAgentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dummyagentDB *DummyAgentDB) (Error error) {

	dummyagent := (*backRepoDummyAgent.Map_DummyAgentDBID_DummyAgentPtr)[dummyagentDB.ID]
	_ = dummyagent // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			dummyagent.TechName = dummyagentDB.TechName_Data.String

			// Engine field
			if dummyagentDB.EngineID.Int64 != 0 {
				dummyagent.Engine = (*backRepo.BackRepoEngine.Map_EngineDBID_EnginePtr)[uint(dummyagentDB.EngineID.Int64)]
			}

			dummyagent.Name = dummyagentDB.Name_Data.String

		}
	}
	return
}

// CommitDummyAgent allows commit of a single dummyagent (if already staged)
func (backRepo *BackRepoStruct) CommitDummyAgent(dummyagent *models.DummyAgent) {
	backRepo.BackRepoDummyAgent.CommitPhaseOneInstance(dummyagent)
	if id, ok := (*backRepo.BackRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID)[dummyagent]; ok {
		backRepo.BackRepoDummyAgent.CommitPhaseTwoInstance(backRepo, id, dummyagent)
	}
}

// CommitDummyAgent allows checkout of a single dummyagent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDummyAgent(dummyagent *models.DummyAgent) {
	// check if the dummyagent is staged
	if _, ok := (*backRepo.BackRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID)[dummyagent]; ok {

		if id, ok := (*backRepo.BackRepoDummyAgent.Map_DummyAgentPtr_DummyAgentDBID)[dummyagent]; ok {
			var dummyagentDB DummyAgentDB
			dummyagentDB.ID = id

			if err := backRepo.BackRepoDummyAgent.db.First(&dummyagentDB, id).Error; err != nil {
				log.Panicln("CheckoutDummyAgent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDummyAgent.CheckoutPhaseOneInstance(&dummyagentDB)
			backRepo.BackRepoDummyAgent.CheckoutPhaseTwoInstance(backRepo, &dummyagentDB)
		}
	}
}
