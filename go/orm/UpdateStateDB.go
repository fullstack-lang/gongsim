// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongsim/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_UpdateState sql.NullBool
var __UpdateState_time__dummyDeclaration time.Duration
var dummy_UpdateState_sort sort.Float64Slice

// UpdateStateAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model updatestateAPI
type UpdateStateAPI struct {
	gorm.Model

	models.UpdateState

	// encoding of pointers
	UpdateStatePointersEnconding
}

// UpdateStatePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type UpdateStatePointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// UpdateStateDB describes a updatestate in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model updatestateDB
type UpdateStateDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field updatestateDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field updatestateDB.Duration {{BasicKind}} (to be completed)
	Duration_Data sql.NullInt64

	// Declation for basic field updatestateDB.Period {{BasicKind}} (to be completed)
	Period_Data sql.NullInt64

	// encoding of pointers
	UpdateStatePointersEnconding
}

// UpdateStateDBs arrays updatestateDBs
// swagger:response updatestateDBsResponse
type UpdateStateDBs []UpdateStateDB

// UpdateStateDBResponse provides response
// swagger:response updatestateDBResponse
type UpdateStateDBResponse struct {
	UpdateStateDB
}

type BackRepoUpdateStateStruct struct {
	// stores UpdateStateDB according to their gorm ID
	Map_UpdateStateDBID_UpdateStateDB *map[uint]*UpdateStateDB

	// stores UpdateStateDB ID according to UpdateState address
	Map_UpdateStatePtr_UpdateStateDBID *map[*models.UpdateState]uint

	// stores UpdateState according to their gorm ID
	Map_UpdateStateDBID_UpdateStatePtr *map[uint]*models.UpdateState

	db *gorm.DB
}

// GetUpdateStateDBFromUpdateStatePtr is a handy function to access the back repo instance from the stage instance
func (backRepoUpdateState *BackRepoUpdateStateStruct) GetUpdateStateDBFromUpdateStatePtr(updatestate *models.UpdateState) (updatestateDB *UpdateStateDB) {
	id := (*backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate]
	updatestateDB = (*backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB)[id]
	return
}

// BackRepoUpdateState.Init set up the BackRepo of the UpdateState
func (backRepoUpdateState *BackRepoUpdateStateStruct) Init(db *gorm.DB) (Error error) {

	if backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr != nil {
		err := errors.New("In Init, backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr should be nil")
		return err
	}

	if backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB != nil {
		err := errors.New("In Init, backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB should be nil")
		return err
	}

	if backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID != nil {
		err := errors.New("In Init, backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.UpdateState, 0)
	backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr = &tmp

	tmpDB := make(map[uint]*UpdateStateDB, 0)
	backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB = &tmpDB

	tmpID := make(map[*models.UpdateState]uint, 0)
	backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID = &tmpID

	backRepoUpdateState.db = db
	return
}

// BackRepoUpdateState.CommitPhaseOne commits all staged instances of UpdateState to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for updatestate := range stage.UpdateStates {
		backRepoUpdateState.CommitPhaseOneInstance(updatestate)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, updatestate := range *backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr {
		if _, ok := stage.UpdateStates[updatestate]; !ok {
			backRepoUpdateState.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoUpdateState.CommitDeleteInstance commits deletion of UpdateState to the BackRepo
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitDeleteInstance(id uint) (Error error) {

	updatestate := (*backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr)[id]

	// updatestate is not staged anymore, remove updatestateDB
	updatestateDB := (*backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB)[id]
	query := backRepoUpdateState.db.Unscoped().Delete(&updatestateDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID), updatestate)
	delete((*backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr), id)
	delete((*backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB), id)

	return
}

// BackRepoUpdateState.CommitPhaseOneInstance commits updatestate staged instances of UpdateState to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseOneInstance(updatestate *models.UpdateState) (Error error) {

	// check if the updatestate is not commited yet
	if _, ok := (*backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate]; ok {
		return
	}

	// initiate updatestate
	var updatestateDB UpdateStateDB
	updatestateDB.CopyBasicFieldsFromUpdateState(updatestate)

	query := backRepoUpdateState.db.Create(&updatestateDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate] = updatestateDB.ID
	(*backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr)[updatestateDB.ID] = updatestate
	(*backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB)[updatestateDB.ID] = &updatestateDB

	return
}

// BackRepoUpdateState.CommitPhaseTwo commits all staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, updatestate := range *backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr {
		backRepoUpdateState.CommitPhaseTwoInstance(backRepo, idx, updatestate)
	}

	return
}

// BackRepoUpdateState.CommitPhaseTwoInstance commits {{structname }} of models.UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, updatestate *models.UpdateState) (Error error) {

	// fetch matching updatestateDB
	if updatestateDB, ok := (*backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB)[idx]; ok {

		updatestateDB.CopyBasicFieldsFromUpdateState(updatestate)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoUpdateState.db.Save(&updatestateDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown UpdateState intance %s", updatestate.Name))
		return err
	}

	return
}

// BackRepoUpdateState.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseOne() (Error error) {

	updatestateDBArray := make([]UpdateStateDB, 0)
	query := backRepoUpdateState.db.Find(&updatestateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, updatestateDB := range updatestateDBArray {
		backRepoUpdateState.CheckoutPhaseOneInstance(&updatestateDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a updatestateDB that has been found in the DB, updates the backRepo and stages the
// models version of the updatestateDB
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseOneInstance(updatestateDB *UpdateStateDB) (Error error) {

	updatestate, ok := (*backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr)[updatestateDB.ID]
	if !ok {
		updatestate = new(models.UpdateState)

		(*backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr)[updatestateDB.ID] = updatestate
		(*backRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate] = updatestateDB.ID

		// append model store with the new element
		updatestate.Stage()
	}
	updatestateDB.CopyBasicFieldsToUpdateState(updatestate)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_UpdateStateDBID_UpdateStateDB)[updatestateDB hold variable pointers
	updatestateDB_Data := *updatestateDB
	preservedPtrToUpdateState := &updatestateDB_Data
	(*backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB)[updatestateDB.ID] = preservedPtrToUpdateState

	return
}

// BackRepoUpdateState.CheckoutPhaseTwo Checkouts all staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, updatestateDB := range *backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB {
		backRepoUpdateState.CheckoutPhaseTwoInstance(backRepo, updatestateDB)
	}
	return
}

// BackRepoUpdateState.CheckoutPhaseTwoInstance Checkouts staged instances of UpdateState to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUpdateState *BackRepoUpdateStateStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, updatestateDB *UpdateStateDB) (Error error) {

	updatestate := (*backRepoUpdateState.Map_UpdateStateDBID_UpdateStatePtr)[updatestateDB.ID]
	_ = updatestate // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitUpdateState allows commit of a single updatestate (if already staged)
func (backRepo *BackRepoStruct) CommitUpdateState(updatestate *models.UpdateState) {
	backRepo.BackRepoUpdateState.CommitPhaseOneInstance(updatestate)
	if id, ok := (*backRepo.BackRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate]; ok {
		backRepo.BackRepoUpdateState.CommitPhaseTwoInstance(backRepo, id, updatestate)
	}
}

// CommitUpdateState allows checkout of a single updatestate (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutUpdateState(updatestate *models.UpdateState) {
	// check if the updatestate is staged
	if _, ok := (*backRepo.BackRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate]; ok {

		if id, ok := (*backRepo.BackRepoUpdateState.Map_UpdateStatePtr_UpdateStateDBID)[updatestate]; ok {
			var updatestateDB UpdateStateDB
			updatestateDB.ID = id

			if err := backRepo.BackRepoUpdateState.db.First(&updatestateDB, id).Error; err != nil {
				log.Panicln("CheckoutUpdateState : Problem with getting object with id:", id)
			}
			backRepo.BackRepoUpdateState.CheckoutPhaseOneInstance(&updatestateDB)
			backRepo.BackRepoUpdateState.CheckoutPhaseTwoInstance(backRepo, &updatestateDB)
		}
	}
}

// CopyBasicFieldsToUpdateStateDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (updatestateDB *UpdateStateDB) CopyBasicFieldsFromUpdateState(updatestate *models.UpdateState) {
	// insertion point for fields commit
	updatestateDB.Name_Data.String = updatestate.Name
	updatestateDB.Name_Data.Valid = true

	updatestateDB.Duration_Data.Int64 = int64(updatestate.Duration)
	updatestateDB.Duration_Data.Valid = true

	updatestateDB.Period_Data.Int64 = int64(updatestate.Period)
	updatestateDB.Period_Data.Valid = true

}

// CopyBasicFieldsToUpdateStateDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (updatestateDB *UpdateStateDB) CopyBasicFieldsToUpdateState(updatestate *models.UpdateState) {

	// insertion point for checkout of basic fields (back repo to stage)
	updatestate.Name = updatestateDB.Name_Data.String
	updatestate.Duration = time.Duration(updatestateDB.Duration_Data.Int64)
	updatestate.Period = time.Duration(updatestateDB.Period_Data.Int64)
}

// Backup generates a json file from a slice of all UpdateStateDB instances in the backrepo
func (backRepoUpdateState *BackRepoUpdateStateStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "UpdateStateDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*UpdateStateDB
	for _, updatestateDB := range *backRepoUpdateState.Map_UpdateStateDBID_UpdateStateDB {
		forBackup = append(forBackup, updatestateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json UpdateState ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json UpdateState file", err.Error())
	}
}

func (backRepoUpdateState *BackRepoUpdateStateStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "UpdateStateDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json UpdateState file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*UpdateStateDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_UpdateStateDBID_UpdateStateDB
	for _, updatestateDB := range forRestore {

		updatestateDB_ID := updatestateDB.ID
		updatestateDB.ID = 0
		query := backRepoUpdateState.db.Create(updatestateDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if updatestateDB_ID != updatestateDB.ID {
			log.Panicf("ID of UpdateState restore ID %d, name %s, has wrong ID %d in DB after create",
				updatestateDB_ID, updatestateDB.Name_Data.String, updatestateDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json UpdateState file", err.Error())
	}
}
