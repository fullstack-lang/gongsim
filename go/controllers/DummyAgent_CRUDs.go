// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsim/go/models"
	"github.com/fullstack-lang/gongsim/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __DummyAgent__dummysDeclaration__ models.DummyAgent
var __DummyAgent_time__dummyDeclaration time.Duration

// An DummyAgentID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDummyAgent updateDummyAgent deleteDummyAgent
type DummyAgentID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DummyAgentInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDummyAgent updateDummyAgent
type DummyAgentInput struct {
	// The DummyAgent to submit or modify
	// in: body
	DummyAgent *orm.DummyAgentAPI
}

// GetDummyAgents
//
// swagger:route GET /dummyagents dummyagents getDummyAgents
//
// Get all dummyagents
//
// Responses:
//    default: genericError
//        200: dummyagentDBsResponse
func GetDummyAgents(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var dummyagents []orm.DummyAgentDB
	query := db.Find(&dummyagents)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each dummyagent, update fields from the database nullable fields
	for idx := range dummyagents {
		dummyagent := &dummyagents[idx]
		_ = dummyagent
		// insertion point for updating fields
		if dummyagent.TechName_Data.Valid {
			dummyagent.TechName = dummyagent.TechName_Data.String
		}

		if dummyagent.Name_Data.Valid {
			dummyagent.Name = dummyagent.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, dummyagents)
}

// PostDummyAgent
//
// swagger:route POST /dummyagents dummyagents postDummyAgent
//
// Creates a dummyagent
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: dummyagentDBResponse
func PostDummyAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.DummyAgentAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create dummyagent
	dummyagentDB := orm.DummyAgentDB{}
	dummyagentDB.DummyAgentAPI = input
	// insertion point for nullable field set
	dummyagentDB.TechName_Data.String = input.TechName
	dummyagentDB.TechName_Data.Valid = true

	dummyagentDB.Name_Data.String = input.Name
	dummyagentDB.Name_Data.Valid = true

	query := db.Create(&dummyagentDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, dummyagentDB)
}

// GetDummyAgent
//
// swagger:route GET /dummyagents/{ID} dummyagents getDummyAgent
//
// Gets the details for a dummyagent.
//
// Responses:
//    default: genericError
//        200: dummyagentDBResponse
func GetDummyAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get dummyagent in DB
	var dummyagent orm.DummyAgentDB
	if err := db.First(&dummyagent, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if dummyagent.TechName_Data.Valid {
		dummyagent.TechName = dummyagent.TechName_Data.String
	}

	if dummyagent.Name_Data.Valid {
		dummyagent.Name = dummyagent.Name_Data.String
	}

	c.JSON(http.StatusOK, dummyagent)
}

// UpdateDummyAgent
//
// swagger:route PATCH /dummyagents/{ID} dummyagents updateDummyAgent
//
// Update a dummyagent
//
// Responses:
//    default: genericError
//        200: dummyagentDBResponse
func UpdateDummyAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var dummyagentDB orm.DummyAgentDB

	// fetch the dummyagent
	query := db.First(&dummyagentDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DummyAgentAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.TechName_Data.String = input.TechName
	input.TechName_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&dummyagentDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the dummyagentDB
	c.JSON(http.StatusOK, dummyagentDB)
}

// DeleteDummyAgent
//
// swagger:route DELETE /dummyagents/{ID} dummyagents deleteDummyAgent
//
// Delete a dummyagent
//
// Responses:
//    default: genericError
func DeleteDummyAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var dummyagentDB orm.DummyAgentDB
	if err := db.First(&dummyagentDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&dummyagentDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
